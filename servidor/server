#!/usr/bin/env python3

import socketserver
import http.server
import threading
import hashlib
import json
import sys
import os

class Server(socketserver.ThreadingMixIn, http.server.HTTPServer):

    resources = {}

    def add_resource(self, resource):
        resource.server = self
        self.resources[resource.path] = resource

    def remove_resource(self, path):
        if path in self.resources:
            del self.resources[path]

    def get_resource(self, path):
        return self.resources[path] if path in self.resources else Resource()

    def get_resources(self, path):
        resources = self.resources.copy()
        return [resources[x] for x in resources if path in x]


class Handler(http.server.BaseHTTPRequestHandler):

    def do_GET(self):
        self.server.get_resource(self.path).do_GET(self)

    def do_POST(self):
        self.server.get_resource(self.path).do_POST(self)

    def do_PUT(self):
        self.server.get_resource(self.path).do_PUT(self)

    def do_DELETE(self):
        self.server.get_resource(self.path).do_DELETE(self)

    def read(self):
        try:
            length = int(self.headers['Content-Length'])
            string = self.rfile.read(length).decode('utf-8')
            return json.loads(string)
        except:
            return {}

    def reply(self, code=200, data=None, headers=[]):
        try:
            self.send_response(code)
            for h in headers:
                self.send_header(h[0], h[1])
            self.end_headers()
            if data:
                self.wfile.write(bytes(json.dumps(data), 'utf-8'))
        except:
            pass


class Resource(object):

    path = ''
    server = None

    def do_GET(self, handler):
        self.default_reply(handler)

    def do_POST(self, handler):
        self.default_reply(handler)

    def do_PUT(self, handler):
        self.default_reply(handler)

    def do_DELETE(self, handler):
        self.default_reply(handler)

    def default_reply(self, handler):
        if not self.server:
            handler.reply(404)
        else:
            handler.reply(405)


class Notifier(Resource):

    listeners = {}

    def do_GET(self, handler):
        self.listeners[handler] = threading.Event()
        self.listeners[handler].wait()

    def notify(self, notification=None):
        listeners = self.listeners
        self.listeners = {}
        for handler, event in listeners.items():
            handler.reply(200, notification)
            event.set()


class Game(Notifier):

    def do_POST(self, handler):
        data = handler.read()
        path = self.path + '/' + self.get_token()

        player = Player()
        player.create(self, path, data)

        handler.server.add_resource(player)
        handler.reply(201, headers=[('Location', player.path)])

    def get_token(self):
        h = hashlib.md5()
        h.update(os.urandom(4096))
        return h.hexdigest()

    def get_players(self):
        return self.server.get_resources(self.path + '/')


class Player(Resource):

    attributes = {'name': '',
                  'hp': 10,
                  'position': {'x': 0, 'y': 0},
                  'movement': {'x': 0, 'y': 0},
                  'combat': {'x': 0, 'y': 0},
                  'delete': False}
    game = None

    def do_GET(self, handler):
        handler.reply(data=self.attributes)

    def do_PUT(self, handler):
        data = handler.read()

        for field in ['name', 'hp', 'position', 'delete']:
            if field in data:
                del data[field]

        self.update(data)
        handler.reply(202)

    def do_DELETE(self, handler):
        self.die()
        handler.reply(204)

    def create(self, game, path, data):
        self.game = game
        self.path = path

        if 'name' in data:
            self.attributes['name'] = data['name']

        self.game.notify(self.attributes)

    def update(self, data):
        for field in ['position', 'movement', 'combat']:
            if field in data:
                self.attributes[field].update(data[field])
                del data[field]
        self.attributes.update(data)
        self.game.notify(self.attributes)

    def die(self):
        self.attributes['delete'] = True
        self.game.notify(self.attributes)
        self.server.remove_resource(self.path)


class Worker(threading.Thread):

    game = None
    step = 0.25

    def run():
        while True:
            time.sleep(0.25)
            for p in game.get_players():
                p.attributes['position']['x'] += p.attributes['movement']['x']
                p.attributes['position']['y'] += p.attributes['movement']['y']


if __name__ == '__main__':
    port = int(sys.argv[1]) if len(sys.argv) > 1 else 80
    server = Server(('localhost', port), Handler)

    game = Game()
    game.path = '/game'
    server.add_resource(game)

    worker = Worker()
    worker.game = game
    worker.start()

    try:
        server.serve_forever()
    except KeyboardInterrupt:
        server.socket.close()

